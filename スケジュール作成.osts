{"version":"0.3.0","body":"// Office Scripts for Excel\n// 業務スケジュール管理システム\n\n// テストケースCSVデータ\nconst testCaseData = [\n    // テストID,テスト内容,入力データ,テスト対象業務ID,期待結果,判定基準\n    [\"2023_01_01_A\", \"元日業務チェック\", \"2023-01-01\", \"1\", \"対象\", \"毎日業務は休日も実行される\"],\n    [\"2023_01_01_B\", \"元日業務チェック\", \"2023-01-01\", \"9\", \"対象\", \"毎週日曜業務として実行\"],\n    [\"2023_01_01_C\", \"元日業務チェック\", \"2023-01-01\", \"56\", \"対象\", \"1月1日の年次業務として実行\"],\n    [\"2023_04_01_A\",\"土曜日業務チェック\",\"2023-04-01\",\"1\",\"対象\",\"毎日業務は土曜日も実行される\"]\n];\n\n\nlet isOutputDebugLog: boolean = false;\n\n\n// 型定義\n/**\n * カレンダー情報を保持する型\n */\ntype CalendarInfo = { [date: string]: boolean };\n\n/**\n * 営業日情報を表す型\n */\ntype BusinessDayInfo = {\n    nth: number;      // 月内での営業日番号（1始まり）\n    total: number;    // 月内の営業日総数\n    reverse: number;  // 月末から数えた営業日番号（最終営業日=0）\n};\n\n/**\n * 日付情報を表す型\n */\ntype DateInfo = {\n    year: number;     // 年\n    month: number;    // 月（1-12）\n    day: number;      // 日\n    dayOfWeek: number; // 曜日（0:日, 1:月, ..., 6:土）\n    isBusinessDay: boolean; // 営業日かどうか\n};\n\n// ユーティリティ関数\n/**\n * 指定日が営業日かどうかを判定する関数\n * @param inputDate - 判定する日付（YYYY-MM-DD形式の文字列）\n * @param calendar - カレンダー情報を格納したオブジェクト\n * @returns boolean - 営業日の場合true、それ以外はfalse\n */\nfunction isBusinessDay(inputDate: string, calendar: CalendarInfo): boolean {\n    if (!inputDate || !calendar) return false;\n    return calendar[inputDate] === true;\n}\n\n/**\n * 日付文字列から日付情報を取得する関数\n * @param dateStr - YYYY-MM-DD形式の日付文字列\n * @param calendar - カレンダー情報\n * @returns DateInfo - 日付情報\n */\nfunction getDateInfo(dateStr: string, calendar: CalendarInfo): DateInfo {\n    const date = new Date(dateStr);\n    return {\n        year: date.getFullYear(),\n        month: date.getMonth() + 1,\n        day: date.getDate(),\n        dayOfWeek: date.getDay(),\n        isBusinessDay: isBusinessDay(dateStr, calendar)\n    };\n}\n\n/**\n * 指定日付の営業日情報を取得する関数\n * @param inputDate - 対象の日付（YYYY-MM-DD形式の文字列）\n * @param calendar - カレンダー情報を格納したオブジェクト\n * @returns BusinessDayInfo - 営業日情報\n */\nfunction getBusinessDayInfo(inputDate: string, calendar: CalendarInfo): BusinessDayInfo {\n    // inputDateの年月を取得\n    const dateObj = new Date(inputDate);\n    const y = dateObj.getFullYear();\n    const m = dateObj.getMonth() + 1;\n\n    // その月の営業日リストを取得\n    const monthStr = y + \"-\" + (m < 10 ? \"0\" : \"\") + m;\n    const businessDays = Object.keys(calendar)\n        .filter(d => d.startsWith(monthStr) && calendar[d] === true) // 当月かつ営業日のものをフィルタリング\n        .sort(); // 日付順にソート\n\n    // 入力日付が営業日リストの何番目かを探す\n    const index = businessDays.indexOf(inputDate);\n\n    // 月内営業日番号と月末からの逆算番号を計算\n    const nth = index !== -1 ? index + 1 : 0; // 0から始まるインデックスを1から始まる番号に変換、見つからない場合は0\n    const total = businessDays.length;\n    const reverse = nth > 0 ? total - nth : -1; // 最終営業日=0になるように逆算、見つからない場合は-1\n\n    return { nth, total, reverse };\n}\n\n/**\n * 指定月の末日を取得する関数\n * @param year - 年\n * @param month - 月（1-12）\n * @returns number - その月の末日\n */\nfunction getLastDayOfMonth(year: number, month: number): number {\n    return new Date(year, month, 0).getDate();\n}\n\n/**\n * 日付をフォーマットする関数（YYYY-MM-DD形式に変換）\n * @param date - 日付オブジェクト\n * @returns string - YYYY-MM-DD形式の日付文字列\n */\nfunction formatDate(date: Date): string {\n    const y = date.getFullYear();\n    const m = date.getMonth() + 1;\n    const d = date.getDate();\n    return `${y}-${m < 10 ? '0' + m : m}-${d < 10 ? '0' + d : d}`;\n}\n\n/**\n * 日付をフォーマットする関数（YYYY/MM/DD形式に変換）\n * @param date - 日付オブジェクト\n * @returns string - YYYY/MM/DD形式の日付文字列\n */\nfunction formatDateBySlash(date: Date): string {\n    const y = date.getFullYear();\n    const m = date.getMonth() + 1;\n    const d = date.getDate();\n    return `${y}/${m < 10 ? '0' + m : m}/${d < 10 ? '0' + d : d}`;\n}\n\n/**\n * Excelの日付値をYYYY-MM-DD形式の文字列に変換する関数\n * @param excelDate - Excel形式の日付（文字列、数値、Dateオブジェクト）\n * @returns string - YYYY-MM-DD形式の日付文字列、エラーの場合はエラーメッセージ\n */\nfunction excelDateToString(excelDate: string | number | Date | boolean): string {\n    try {\n        let dateObj: Date;\n\n        if (typeof excelDate === 'number') {\n            // エクセルのシリアル値をJavaScriptのDateに変換\n            const millisecondsPerDay = 24 * 60 * 60 * 1000;\n            dateObj = new Date((excelDate - 25569) * millisecondsPerDay); // 25569は1900/1/1から1970/1/1までの日数\n        } else if (typeof excelDate === 'string') {\n            // 日付形式（YYYY-MM-DD または YYYY/MM/DD または M/D/YYYY）の文字列かどうか確認\n            if (/^\\d{4}-\\d{1,2}-\\d{1,2}$/.test(excelDate)) {\n                // 既にYYYY-MM-DD形式の場合は、日付部分を正規化（ゼロパディング）\n                const parts: string[] = excelDate.split('-');\n                const year: string = parts[0];\n                const month: string = parts[1].padStart(2, '0');\n                const day: string = parts[2].padStart(2, '0');\n                return `${year}-${month}-${day}`;\n            } else if (/^\\d{4}\\/\\d{1,2}\\/\\d{1,2}$/.test(excelDate)) {\n                // YYYY/MM/DD形式の場合は、YYYY-MM-DD形式に変換して正規化\n                const parts: string[] = excelDate.split('/');\n                const year: string = parts[0];\n                const month: string = parts[1].padStart(2, '0');\n                const day: string = parts[2].padStart(2, '0');\n                return `${year}-${month}-${day}`;\n            } else if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(excelDate)) {\n                // M/D/YYYY形式の場合は、YYYY-MM-DD形式に変換して正規化\n                const parts: string[] = excelDate.split('/');\n                const month: string = parts[0].padStart(2, '0');\n                const day: string = parts[1].padStart(2, '0');\n                const year: string = parts[2];\n                return `${year}-${month}-${day}`;\n            }\n\n            // 文字列がシリアル値の場合とISO日付文字列の場合を考慮\n            const parsedNumber = parseInt(excelDate, 10);\n            if (!isNaN(parsedNumber)) {\n                const millisecondsPerDay = 24 * 60 * 60 * 1000;\n                dateObj = new Date((parsedNumber - 25569) * millisecondsPerDay);\n            } else {\n                dateObj = new Date(excelDate); // ISO日付文字列として解析\n            }\n        } else if (excelDate instanceof Date) {\n            dateObj = excelDate;\n        } else {\n            throw new Error(\"不明な日付形式\");\n        }\n\n        // 無効な日付の場合\n        if (isNaN(dateObj.getTime())) {\n            throw new Error(\"無効な日付\");\n        }\n\n        return formatDate(dateObj);\n    } catch (e) {\n        return `error:${String(e)}`;\n    }\n}\n\n/**\n * 月の第n曜日を計算する関数\n * @param year - 年\n * @param month - 月（1-12）\n * @param dayOfWeek - 曜日（0:日, 1:月, ... 6:土）\n * @param occurance - 何番目か（1-5）\n * @returns number - 日付（該当しない場合は0）\n */\nfunction getNthDayOfWeekInMonth(year: number, month: number, dayOfWeek: number, occurance: number): number {\n    if (dayOfWeek < 0 || dayOfWeek > 6 || occurance < 1 || occurance > 5) return 0;\n\n    // 月の最初の日の曜日を取得\n    const firstDay = new Date(year, month - 1, 1);\n    const firstDayOfWeek = firstDay.getDay();\n\n    // 最初の指定曜日の日付を計算\n    let firstOccurance = 1 + (dayOfWeek - firstDayOfWeek + 7) % 7;\n\n    // 何番目かに応じて日付を計算\n    const day = firstOccurance + (occurance - 1) * 7;\n\n    // 月末を超えないか確認\n    if (day > getLastDayOfMonth(year, month)) {\n        return 0; // 該当する日付がない場合は0を返す\n    }\n\n    return day;\n}\n\n/**\n * 指定月のn営業日目を取得する関数\n * @param year - 年\n * @param month - 月（1-12）\n * @param n - 何番目の営業日か\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns string - n営業日目の日付（YYYY-MM-DD形式）\n */\nfunction getNthBusinessDayOfMonth(year: number, month: number, n: number, calendar: CalendarInfo, workbook: ExcelScript.Workbook): string {\n    try {\n        debugLog(workbook, `メソッド=getNthBusinessDayOfMonth, year=${year},month=${month},n=${n},`, \"info\");\n        if (n <= 0) return \"\";\n\n        // 月の初日と末日\n        const firstDay = new Date(year, month - 1, 1);\n        const lastDay = new Date(year, month, 0);\n\n        let businessDayCount = 0;\n        const currentDate = new Date(firstDay);\n\n        // 月内を順に検索\n        while (currentDate <= lastDay) {\n            const dateStr = formatDate(currentDate);\n\n            // 営業日であれば加算\n            if (calendar[dateStr] === true) {\n                businessDayCount++;\n\n                // 目的のn営業日に到達したら\n                if (businessDayCount === n) {\n                    return dateStr;\n                }\n            }\n\n            // 次の日へ\n            currentDate.setDate(currentDate.getDate() + 1);\n        }\n\n        return \"\";\n    } catch (e) {\n        debugLog(workbook, `第n営業日計算エラー: ${String(e)}`, \"error\");\n        return \"\";\n    }\n}\n\n/**\n * 指定月の末日からn営業日前の日付を取得する関数\n * @param year - 年\n * @param month - 月（1-12）\n * @param n - 月末から何営業日前か（0=最終営業日）\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns string - 月末からn営業日前の日付（YYYY-MM-DD形式）\n */\nfunction getReverseNthBusinessDayOfMonth(year: number, month: number, n: number, calendar: CalendarInfo, workbook: ExcelScript.Workbook): string {\n    try {\n        debugLog(workbook, `メソッド=getReverseNthBusinessDayOfMonth, month=${month}, n=${n},`, \"info\");\n        if (n < 0) return \"\";\n\n        // 月の初日と末日\n        const firstDay = new Date(year, month - 1, 1);\n        const lastDay = new Date(year, month, 0);\n\n        let businessDayCount = 0;\n        const currentDate = new Date(lastDay);\n\n        // 月内を逆順に検索\n        while (currentDate >= firstDay) {\n            const dateStr = formatDate(currentDate);\n\n            // 営業日であれば加算\n            if (calendar[dateStr] === true) {\n                // 目的のn営業日に到達したら\n                if (businessDayCount === n) {\n                    return dateStr;\n                }\n                businessDayCount++;\n            }\n\n            // 前の日へ\n            currentDate.setDate(currentDate.getDate() - 1);\n        }\n\n        return \"\";\n    } catch (e) {\n        debugLog(workbook, `月末からn営業日計算エラー: ${String(e)}`, \"error\");\n        return \"\";\n    }\n}\n\n/**\n * 振替規則を適用して日付を計算する関数\n * @param inputDate - 基準となる日付（YYYY-MM-DD形式）\n * @param rule - 振替規則（\"直前営業日\"、\"直後営業日\"、\"振替しない\"）\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns string - 振替後の日付（YYYY-MM-DD形式）\n */\nfunction applyFurikaeRule(inputDate: string, rule: string, calendar: CalendarInfo, workbook: ExcelScript.Workbook): string {\n    debugLog(workbook, `メソッド=applyFurikaeRule, inputDate=${inputDate}, rule=${rule},`, \"info\");\n    // 既に営業日の場合や振替しない場合は元の日付\n    if (isBusinessDay(inputDate, calendar) || !rule || rule === \"振替しない\") {\n        return inputDate;\n    }\n\n    // 直前営業日\n    if (rule === \"直前営業日\") {\n        const prevBusinessDay = getPreviousBusinessDay(inputDate, calendar, workbook);\n        return prevBusinessDay || inputDate;\n    }\n\n    // 直後営業日\n    if (rule === \"直後営業日\") {\n        const nextBusinessDay = getNextBusinessDay(inputDate, calendar, workbook);\n        return nextBusinessDay || inputDate;\n    }\n\n    // その他の場合は元の日付\n    return inputDate;\n}\n\n/**\n * デバッグログを記録するシートを作成する\n */\nfunction create_debug_sheet(workbook: ExcelScript.Workbook, isClear = false) {\n\n    if (isOutputDebugLog) {\n        let debugSheet = workbook.getWorksheet(\"デバッグログ\");\n        if (!debugSheet) {\n            debugSheet = workbook.addWorksheet(\"デバッグログ\");\n            debugSheet.getRange(\"A1:C1\").setValues([[\"タイムスタンプ\", \"レベル\", \"ログメッセージ\"]]);\n        }\n\n        if (isClear) {\n            // 既存のデータをクリア\n            const existingRange = debugSheet.getUsedRange();\n            if (existingRange && existingRange.getRowCount() > 1) {\n                // ヘッダー行以外をクリア\n                const dataRange = debugSheet.getRange(`A2:C${existingRange.getRowCount()}`);\n                dataRange.clear();\n            }\n        }\n    }\n\n}\n\n/**\n * デバッグログを記録する関数\n * @param workbook - Excelワークブックオブジェクト\n * @param message - ログメッセージ\n * @param level - ログレベル（\"info\", \"warning\", \"error\"のいずれか）\n */\nfunction debugLog(workbook: ExcelScript.Workbook, message: string, level: \"info\" | \"warning\" | \"error\" = \"info\"): void {\n\n    if (isOutputDebugLog) {\n        // デバッグシートを準備\n        let debugSheet = workbook.getWorksheet(\"デバッグログ\");\n        if (!debugSheet) {\n            create_debug_sheet(workbook, false);\n        }\n\n        // 最終行を取得してログを追加\n        const lastRow = debugSheet.getUsedRange()?.getRowCount() || 1;\n        const timestamp = new Date().toLocaleTimeString('ja-JP', { timeZone: 'Asia/Tokyo' });\n        debugSheet.getRange(`A${lastRow + 1}:C${lastRow + 1}`).setValues([[timestamp, level, message]]);\n    }\n\n}\n\n/**\n * カレンダーデータを準備する関数\n * @param workbook - Excelワークブックオブジェクト\n * @returns CalendarInfo - 日付をキー、営業日フラグを値とするマップ\n */\nfunction prepareCalendarMap(workbook: ExcelScript.Workbook): CalendarInfo {\n    // カレンダーシートを取得\n    const calSheet = workbook.getWorksheet(\"カレンダー\");\n    if (!calSheet) {\n        throw new Error(\"カレンダーシートが見つかりません。\");\n    }\n\n    // カレンダーデータを取得\n    const calRange = calSheet.getUsedRange();\n    if (!calRange) {\n        throw new Error(\"カレンダーシートにデータがありません。\");\n    }\n\n    // カレンダーデータの配列を取得\n    const calValues = calRange.getValues();\n    const calMap: CalendarInfo = {};\n\n    debugLog(workbook, `カレンダーデータ行数: ${calValues.length}`);\n\n    try {\n        // ヘッダー行をスキップして2行目からデータを処理\n        for (let i = 1; i < calValues.length; i++) {\n            // 日付データがない行はスキップ\n            if (!calValues[i][0]) continue;\n\n            // 日付文字列に変換（明示的に型変換を行う）\n            let dateValue: string | number | boolean | Date = calValues[i][0];\n            let convertedValue: string | number | Date;\n\n            if (typeof dateValue === 'boolean') {\n                // booleanの場合は文字列に変換\n                convertedValue = String(dateValue);\n            } else {\n                convertedValue = dateValue as string | number | Date;\n            }\n\n            let dateStr: string = excelDateToString(convertedValue);\n            if (dateStr.startsWith(\"error:\")) continue;\n\n            // 営業日フラグを取得（TRUE/true/1を営業日とみなす）\n            const isBusinessDay = calValues[i][1] === true ||\n                calValues[i][1] === \"TRUE\" ||\n                calValues[i][1] === 1;\n            calMap[dateStr] = isBusinessDay;\n        }\n    } catch (e) {\n        debugLog(workbook, `カレンダーデータ処理エラー: ${String(e)}`, \"error\");\n    }\n\n    debugLog(workbook, `カレンダーデータ件数: ${Object.keys(calMap).length}`);\n    return calMap;\n}\n\n/**\n * 業務一覧から業務ID→業務名のマッピングを取得する関数\n * @param workbook - Excelワークブックオブジェクト\n * @returns Map<string, string> - 業務IDをキー、業務名を値とするマップ\n */\nfunction prepareTaskNameMap(workbook: ExcelScript.Workbook): Map<string, string> {\n    try {\n        // 業務一覧シートを取得\n        const taskSheet = workbook.getWorksheet(\"業務一覧\");\n        if (!taskSheet) {\n            throw new Error(\"「業務一覧」シートが見つかりません。\");\n        }\n\n        // 業務一覧データの取得\n        let taskData: (string | number | boolean)[][] = [];\n        let headers: string[] = [];\n\n        // テーブルを検索\n        const tables = taskSheet.getTables();\n        if (tables.length > 0) {\n            // テーブルからデータを取得\n            const table = tables[0];\n            debugLog(workbook, `テーブル名: ${table.getName()}`);\n\n            try {\n                taskData = table.getRangeBetweenHeaderAndTotal().getValues();\n                headers = table.getHeaderRowRange().getValues()[0].map(v => String(v));\n            } catch (e) {\n                debugLog(workbook, `テーブル取得エラー: ${String(e)}`, \"error\");\n\n                // エラー時はシートから直接取得\n                const range = taskSheet.getUsedRange();\n                const values = range.getValues();\n                headers = values[0].map(v => String(v));\n                taskData = values.slice(1);\n            }\n        } else {\n            // テーブルがない場合はシートから直接取得\n            debugLog(workbook, \"テーブルが見つからないため使用範囲からデータを取得\");\n            const range = taskSheet.getUsedRange();\n            const values = range.getValues();\n            headers = values[0].map(v => String(v));\n            taskData = values.slice(1);\n        }\n\n        // 業務IDと業務名のインデックスを取得\n        const idIndex = headers.indexOf(\"業務ID\");\n        const nameIndex = headers.indexOf(\"業務名\");\n\n        if (idIndex === -1 || nameIndex === -1) {\n            throw new Error(\"業務一覧シートに業務IDまたは業務名の列がありません。\");\n        }\n\n        // 業務ID→業務名のマッピングを作成\n        const taskNameMap = new Map<string, string>();\n        for (const row of taskData) {\n            const id = String(row[idIndex] || \"\");\n            const name = String(row[nameIndex] || \"\");\n\n            if (id && id !== \"undefined\" && id !== \"null\") {\n                taskNameMap.set(id, name);\n            }\n        }\n\n        debugLog(workbook, `業務名マッピング作成: ${taskNameMap.size}件`);\n        return taskNameMap;\n    } catch (e) {\n        debugLog(workbook, `業務名マッピング作成エラー: ${String(e)}`, \"error\");\n        return new Map<string, string>();\n    }\n}\n\n/**\n * 指定日の直前営業日を取得する関数\n * @param inputDate - 基準となる日付（YYYY-MM-DD形式）\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns string - 直前営業日の日付（YYYY-MM-DD形式）\n */\nfunction getPreviousBusinessDay(inputDate: string, calendar: CalendarInfo, workbook: ExcelScript.Workbook): string {\n    try {\n        debugLog(workbook, `メソッド=getPreviousBusinessDay, inputDate=${inputDate}`, \"info\");\n        // 日付オブジェクトに変換\n        const baseDate = new Date(inputDate);\n        if (isNaN(baseDate.getTime())) {\n            debugLog(workbook, `直前営業日計算エラー: 無効な日付形式 ${inputDate}`, \"error\");\n            return \"\";\n        }\n\n        // 基準日の前日から検索開始\n        const prevDate = new Date(baseDate);\n        prevDate.setDate(prevDate.getDate() - 1);\n\n        // 最大100日前まで遡って検索\n        for (let i = 0; i < 100; i++) {\n            const dateStr = formatDate(prevDate);\n\n            // 営業日の場合\n            if (calendar[dateStr] === true) {\n                return dateStr;\n            }\n\n            // 1日前にする\n            prevDate.setDate(prevDate.getDate() - 1);\n        }\n\n        // 見つからない場合\n        return \"\";\n    } catch (e) {\n        debugLog(workbook, `直前営業日計算エラー: ${String(e)}`, \"error\");\n        return \"\";\n    }\n}\n\n/**\n * 指定日の直後営業日を取得する関数\n * @param inputDate - 基準となる日付（YYYY-MM-DD形式）\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns string - 直後営業日の日付（YYYY-MM-DD形式）\n */\nfunction getNextBusinessDay(inputDate: string, calendar: CalendarInfo, workbook: ExcelScript.Workbook): string {\n    try {\n        debugLog(workbook, `メソッド=getNextBusinessDay, inputDate=${inputDate}`, \"info\");\n        // 日付オブジェクトに変換\n        const baseDate = new Date(inputDate);\n        if (isNaN(baseDate.getTime())) {\n            debugLog(workbook, `直後営業日計算エラー: 無効な日付形式 ${inputDate}`, \"error\");\n            return \"\";\n        }\n\n        // 基準日の翌日から検索開始\n        const nextDate = new Date(baseDate);\n        nextDate.setDate(nextDate.getDate() + 1);\n\n        // 最大100日後まで検索\n        for (let i = 0; i < 100; i++) {\n            const dateStr = formatDate(nextDate);\n\n            // 営業日の場合\n            if (calendar[dateStr] === true) {\n                return dateStr;\n            }\n\n            // 1日後にする\n            nextDate.setDate(nextDate.getDate() + 1);\n        }\n\n        // 見つからない場合\n        return \"\";\n    } catch (e) {\n        debugLog(workbook, `直後営業日計算エラー: ${String(e)}`, \"error\");\n        return \"\";\n    }\n}\n\n/**\n * 日次業務判定関数\n * @param inputDate - 対象日付（YYYY-MM-DD形式）\n * @param base - 基準（\"暦日\"/\"営業日\"）\n * @param calendar - カレンダー情報\n * @param furikae - 振替規則（\"直前営業日\"/\"直後営業日\"/\"振替しない\"）\n * @returns boolean - 実行対象の場合true\n */\nfunction isDailyTask(inputDate: string, base: string, calendar: CalendarInfo, furikae: string = \"\"): boolean {\n    // 暦日の場合\n    if (!base || base === \"\" || base === \"暦日\") {\n        // 非営業日で振替規則がある場合は対象外\n        if (!isBusinessDay(inputDate, calendar) &&\n            (furikae === \"直前営業日\" || furikae === \"直後営業日\")) {\n            return false;\n        }\n        return true;\n    }\n\n    // 営業日指定の場合は営業日かどうかを確認\n    // 「営業日」という文字列を含むすべての基準を営業日判定する\n    if (base.includes(\"営業日\")) {\n        return isBusinessDay(inputDate, calendar);\n    }\n\n    return false;\n}\n\n/**\n * 週次業務判定関数\n * @param inputDate - 対象日付（YYYY-MM-DD形式）\n * @param base - 基準（\"暦日(曜日)\"）\n * @param youbi - 曜日指定（\"月\"/\"火\"など）\n * @param furikae - 振替規則（\"直前営業日\"/\"直後営業日\"/\"振替しない\"）\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns boolean - 実行対象の場合true\n */\nfunction isWeeklyTask(inputDate: string, base: string, youbi: string, furikae: string = \"\", calendar: CalendarInfo = null, workbook: ExcelScript.Workbook = null): boolean {\n    debugLog(workbook, `メソッド=isWeeklyTask, inputDate=${inputDate}, base=${base}, youbi=${youbi}, furikae=${furikae}`, \"info\");\n    if (base !== \"暦日(曜日)\" || !youbi) return false;\n\n    const date = new Date(inputDate);\n    const dayOfWeek = [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"][date.getDay()];\n    const dateInfo = getDateInfo(inputDate, calendar);\n\n    // 曜日が一致する場合\n    if (dayOfWeek === youbi) {\n        // 振替規則がない場合、または営業日の場合、または振替しない設定の場合は対象\n        if (!furikae || furikae === \"振替しない\" || dateInfo.isBusinessDay) {\n            return true;\n        }\n\n        // 非営業日で振替規則がある場合は実行対象外\n        if (!dateInfo.isBusinessDay && (furikae === \"直前営業日\" || furikae === \"直後営業日\")) {\n            if (workbook) {\n                debugLog(workbook, `週次業務: 日付${inputDate}は${youbi}曜日に一致するが非営業日のため振替対象`);\n            }\n            return false;\n        }\n    }\n\n    // 曜日が一致せず、振替規則もない場合は対象外\n    if (dayOfWeek !== youbi && (!furikae || furikae === \"振替しない\")) {\n        return false;\n    }\n\n    // 以下は振替規則がある場合の処理\n    if (!calendar || !workbook) {\n        return false; // カレンダー情報がない場合は振替判定できないのでfalse\n    }\n\n    // 直前営業日の振替ルールがある場合\n    if (furikae === \"直前営業日\" && dateInfo.isBusinessDay) {\n        // 翌日が対象の曜日かつ非営業日かチェック\n        const nextDay = new Date(date);\n        nextDay.setDate(nextDay.getDate() + 1);\n        const nextDayStr = formatDate(nextDay);\n        const nextDayOfWeek = [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"][nextDay.getDay()];\n\n        // 翌日が対象曜日で非営業日の場合\n        if (nextDayOfWeek === youbi && !isBusinessDay(nextDayStr, calendar)) {\n            debugLog(workbook, `週次業務: 日付${inputDate}は${nextDayStr}(${youbi})の直前営業日振替として対象`);\n            return true;\n        }\n    }    // 直後営業日の振替ルールがある場合\n    if (furikae === \"直後営業日\" && dateInfo.isBusinessDay) {\n        // 対象曜日の日付を特定（当週および前週の対象曜日を探す）\n        const targetDayOfWeekIndex = [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"].indexOf(youbi);\n        \n        // 当週の対象曜日\n        const weekStartDay = new Date(date);\n        weekStartDay.setDate(weekStartDay.getDate() - weekStartDay.getDay()); // 日曜日に移動\n        const currentWeekTargetDate = new Date(weekStartDay);\n        currentWeekTargetDate.setDate(currentWeekTargetDate.getDate() + targetDayOfWeekIndex);\n        \n        // 前週の対象曜日\n        const prevWeekTargetDate = new Date(currentWeekTargetDate);\n        prevWeekTargetDate.setDate(prevWeekTargetDate.getDate() - 7);\n        \n        // 当週の対象曜日をチェック\n        const currentWeekTargetDateStr = formatDate(currentWeekTargetDate);\n        if (!isBusinessDay(currentWeekTargetDateStr, calendar)) {\n            const nextBusinessDayAfterTarget = getNextBusinessDay(currentWeekTargetDateStr, calendar, workbook);\n            if (nextBusinessDayAfterTarget === inputDate) {\n                debugLog(workbook, `週次業務: 日付${inputDate}は${currentWeekTargetDateStr}(${youbi})の直後営業日振替として対象`);\n                return true;\n            }\n        }\n        \n        // 前週の対象曜日をチェック\n        const prevWeekTargetDateStr = formatDate(prevWeekTargetDate);\n        if (!isBusinessDay(prevWeekTargetDateStr, calendar)) {\n            const nextBusinessDayAfterTarget = getNextBusinessDay(prevWeekTargetDateStr, calendar, workbook);\n            if (nextBusinessDayAfterTarget === inputDate) {\n                debugLog(workbook, `週次業務: 日付${inputDate}は${prevWeekTargetDateStr}(${youbi})の直後営業日振替として対象`);\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * 月次/年次業務の暦日(n日指定)判定関数\n * @param inputDate - 対象日付（YYYY-MM-DD形式）\n * @param n - n日\n * @param furikae - 振替規則\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns boolean - 実行対象の場合true\n */\nfunction isCalendarDayNthTask(inputDate: string, n: number, furikae: string, calendar: CalendarInfo, workbook: ExcelScript.Workbook): boolean {\n    const dateInfo = getDateInfo(inputDate, calendar);\n    debugLog(workbook, `メソッド=isCalendarDayNthTask, n=${n}, furikae=${furikae}`, \"info\");\n\n    // 本来の日付を生成（当月のn日）\n    const targetDate = formatDate(new Date(dateInfo.year, dateInfo.month - 1, n));\n\n    // 振替規則がある場合の処理\n    if (furikae && (furikae === \"直前営業日\" || furikae === \"直後営業日\")) {\n        // 本来の日付が非営業日かどうか確認\n        if (!isBusinessDay(targetDate, calendar)) {\n            // 非営業日の場合、振替規則を適用\n            const shiftedDate = applyFurikaeRule(targetDate, furikae, calendar, workbook);\n\n            // 振替後の日付が対象日と一致するかどうか確認\n            if (shiftedDate === inputDate) {\n                debugLog(workbook, `日付${inputDate}は${dateInfo.month}月${n}日の振替日に一致`);\n                return true;\n            }\n\n            // 本来の日付が非営業日で、振替規則がある場合は、本来の日付での実行は対象外\n            if (targetDate === inputDate) {\n                debugLog(workbook, `日付${inputDate}は${dateInfo.month}月${n}日と一致するが非営業日のため振替対象`);\n                return false;\n            }\n        }\n    }\n\n    // 当日が指定された日と一致するか確認（振替対象でない場合）\n    // 日だけではなく、「当月の指定された日」であることを確認\n    if (dateInfo.day === n) {\n        // 振替規則があり、当日が非営業日の場合は既に上の処理で判定されているので、\n        // ここで一致した場合は、営業日であるか、振替規則がない場合        debugLog(workbook, `日付${inputDate}は${dateInfo.month}月${n}日に一致`);\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * 月次/年次業務の暦日(月末逆算)判定関数\n * @param inputDate - 対象日付（YYYY-MM-DD形式）\n * @param n - 月末からn日前（0=末日）\n * @param furikae - 振替規則\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns boolean - 実行対象の場合true\n */\nfunction isCalendarDayEndOfMonthTask(inputDate: string, n: number, furikae: string, calendar: CalendarInfo, workbook: ExcelScript.Workbook): boolean {\n    debugLog(workbook, `メソッド=isCalendarDayEndOfMonthTask, n=${n}, furikae=${furikae}`, \"info\");\n\n    const dateInfo = getDateInfo(inputDate, calendar);\n\n    // 月末日\n    const lastDay = getLastDayOfMonth(dateInfo.year, dateInfo.month);\n\n    // 月末からn日前\n    const targetDay = n === 0 ? lastDay : lastDay - n;\n\n    // 指定日と一致\n    if (dateInfo.day === targetDay) {\n        debugLog(workbook, `日付${inputDate}は${dateInfo.month}月の月末から${n}日前(${targetDay}日)に一致`);\n\n        // 非営業日の場合は対象外とする\n        if (!dateInfo.isBusinessDay) {\n            debugLog(workbook, `日付${inputDate}は非営業日のため対象外`, \"info\");\n            return false;\n        }\n\n        return true;\n    }\n\n    // 振替規則がある場合の処理\n    if (furikae && (furikae === \"直前営業日\" || furikae === \"直後営業日\")) {\n        // 本来の日付\n        const targetDate = formatDate(new Date(dateInfo.year, dateInfo.month - 1, targetDay));\n        // 本来の日付が非営業日で、かつ振替後が対象日と一致\n        if (!isBusinessDay(targetDate, calendar)) {\n            const shiftedDate = applyFurikaeRule(targetDate, furikae, calendar, workbook);\n            if (shiftedDate === inputDate) {\n                debugLog(workbook, `日付${inputDate}は${dateInfo.month}月の月末から${n}日前(${targetDay}日)の振替日として一致`);\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n/**\n * 月次/年次業務の営業日(n日指定)判定関数\n * @param inputDate - 対象日付（YYYY-MM-DD形式）\n * @param n - 何営業日目か\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns boolean - 実行対象の場合true\n */\nfunction isBusinessDayNthTask(inputDate: string, n: number, calendar: CalendarInfo, workbook: ExcelScript.Workbook): boolean {\n    debugLog(workbook, `メソッド=isCalendarDayEndOfMonthTask, n=${n}`, \"info\");\n\n    // 非営業日は対象外\n    if (!isBusinessDay(inputDate, calendar)) return false;\n\n    // 営業日情報を取得\n    const businessDayInfo = getBusinessDayInfo(inputDate, calendar);\n\n    // n営業日目と一致するか\n    const isMatch = (businessDayInfo.nth === n);\n    if (isMatch) {\n        const dateInfo = getDateInfo(inputDate, calendar);\n        debugLog(workbook, `日付${inputDate}は${dateInfo.month}月の第${n}営業日です (nth=${businessDayInfo.nth}, total=${businessDayInfo.total})`);\n    }\n    return isMatch;\n}\n\n/**\n * 月次/年次業務の営業日(月末逆算)判定関数\n * @param inputDate - 対象日付（YYYY-MM-DD形式）\n * @param n - 月末から何営業日前か（0=最終営業日）\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns boolean - 実行対象の場合true\n */\nfunction isBusinessDayEndOfMonthTask(inputDate: string, n: number, calendar: CalendarInfo, workbook: ExcelScript.Workbook): boolean {\n    debugLog(workbook, `メソッド=isBusinessDayEndOfMonthTask, inputDate=${inputDate}, n=${n}`, \"info\");\n    // 非営業日は対象外\n    if (!isBusinessDay(inputDate, calendar)) return false;\n\n    // 営業日情報を取得\n    const businessDayInfo = getBusinessDayInfo(inputDate, calendar);\n\n    // 月末からのn営業日と一致するか\n    const isMatch = (businessDayInfo.reverse === n);\n    if (isMatch) {\n        const dateInfo = getDateInfo(inputDate, calendar);\n        debugLog(workbook, `日付${inputDate}は${dateInfo.month}月の最終営業日から${n}営業日前です (reverse=${businessDayInfo.reverse})`);\n    }\n    return isMatch;\n}\n\n/**\n * 月次/年次業務の暦日(曜日)判定関数\n * @param inputDate - 対象日付（YYYY-MM-DD形式）\n * @param youbi - 曜日（\"月\"/\"火\"など）\n * @param weekNum - 週番号（1-5）\n * @param furikae - 振替規則\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns boolean - 実行対象の場合true\n */\nfunction isCalendarDayWeekDayTask(inputDate: string, youbi: string, weekNum: number, furikae: string, calendar: CalendarInfo, workbook: ExcelScript.Workbook): boolean {\n    debugLog(workbook, `メソッド=isCalendarDayWeekDayTask, inputDate=${inputDate}, youbi=${youbi}, weekNum=${weekNum}, furikae=${furikae}`, \"info\");\n\n    if (!youbi || !weekNum) return false;\n\n    const dateInfo = getDateInfo(inputDate, calendar);\n\n    // 曜日を数値に変換\n    const youbiIndex = [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"].indexOf(youbi);\n    if (youbiIndex === -1) return false;\n\n    // 第n曜日の日付を計算\n    const targetDay = getNthDayOfWeekInMonth(dateInfo.year, dateInfo.month, youbiIndex, weekNum);\n    if (targetDay === 0) {\n        debugLog(workbook, `${dateInfo.year}年${dateInfo.month}月に第${weekNum}${youbi}曜日は存在しません`);\n        return false; // この月にその曜日が存在しない\n    }\n\n\n    // 振替規則がある場合の処理\n    if (furikae && (furikae === \"直前営業日\" || furikae === \"直後営業日\")) {\n        // 本来の日付\n        const targetDate = formatDate(new Date(dateInfo.year, dateInfo.month - 1, targetDay));\n\n        // 本来の日付が非営業日で、かつ振替後が対象日と一致\n        if (!isBusinessDay(targetDate, calendar)) {\n            const shiftedDate = applyFurikaeRule(targetDate, furikae, calendar, workbook);\n            debugLog(workbook, `第${weekNum}${youbi}曜日(${targetDate})の振替日を計算: ${shiftedDate}`);\n            if (shiftedDate === inputDate) {\n                debugLog(workbook, `日付${inputDate}は${dateInfo.month}月の第${weekNum}${youbi}曜日(${targetDate})の振替日として一致`);\n                return true;\n            }\n        } else {\n            // 指定日と一致\n            if (dateInfo.day === targetDay) {\n                debugLog(workbook, `日付${inputDate}は${dateInfo.month}月の第${weekNum}${youbi}曜日に一致`);\n                return true;\n            }\n        }\n    } else {\n        // 指定日と一致\n        if (dateInfo.day === targetDay) {\n            debugLog(workbook, `日付${inputDate}は${dateInfo.month}月の第${weekNum}${youbi}曜日に一致`);\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * 業務スケジュール判定の中核関数\n * @param inputDate - 対象日付（YYYY-MM-DD形式）\n * @param taskData - 業務データ\n * @param headers - ヘッダー情報\n * @param calendar - カレンダー情報\n * @param workbook - Excelワークブック\n * @returns boolean - 実行対象の場合true\n */\nfunction isTargetTask(\n    inputDate: string,\n    taskData: (string | number | boolean)[],\n    headers: string[],\n    calendar: CalendarInfo,\n    workbook: ExcelScript.Workbook\n): boolean {\n    debugLog(workbook, `メソッド=isTargetTask, inputDate=${inputDate}, taskData=${taskData}`, \"info\");\n    try {\n        // 業務ID\n        const idIdx = headers.indexOf(\"業務ID\");\n        const id = idIdx >= 0 ? String(taskData[idIdx] || \"\") : \"未定義\";\n\n        // 有効期間チェック\n        const startDateIdx = headers.indexOf(\"有効開始日\");\n        const endDateIdx = headers.indexOf(\"有効終了日\");\n\n        if (startDateIdx !== -1) {\n            const startDate = String(taskData[startDateIdx] || \"\");\n            if (startDate) {\n                const startDateStr = excelDateToString(startDate);\n                if (!startDateStr.startsWith(\"error:\") && inputDate < startDateStr) {\n                    debugLog(workbook, `業務ID=${id}: 有効開始日(${startDateStr})前のため対象外`, \"info\");\n                    return false;\n                }\n            }\n        }\n\n        if (endDateIdx !== -1) {\n            const endDate = String(taskData[endDateIdx] || \"\");\n            if (endDate) {\n                const endDateStr = excelDateToString(endDate);\n                if (!endDateStr.startsWith(\"error:\") && inputDate > endDateStr) {\n                    debugLog(workbook, `業務ID=${id}: 有効終了日(${endDateStr})後のため対象外`, \"info\");\n                    return false;\n                }\n            }\n        }\n\n        // 周期・頻度\n        const freqIdx = headers.indexOf(\"周期・頻度\");\n        const freq = freqIdx >= 0 ? String(taskData[freqIdx] || \"\") : \"\";\n\n        // 基準\n        const baseIdx = headers.indexOf(\"基準\");\n        const base = baseIdx >= 0 ? String(taskData[baseIdx] || \"\") : \"\";\n\n        // 月\n        const monthIdx = headers.indexOf(\"月\");\n        const monthValue = monthIdx >= 0 ? (taskData[monthIdx] !== undefined ? taskData[monthIdx] : \"\") : \"\";\n        const month = monthValue !== \"\" ? Number(monthValue) : null;\n\n        // 週番号\n        const weekNumIdx = headers.indexOf(\"週番号\");\n        const weekNumValue = weekNumIdx >= 0 ? (taskData[weekNumIdx] !== undefined ? taskData[weekNumIdx] : \"\") : \"\";\n        const weekNum = weekNumValue !== \"\" ? Number(weekNumValue) : null;\n\n        // 曜日\n        const youbiIdx = headers.indexOf(\"曜日\");\n        const youbi = youbiIdx >= 0 ? String(taskData[youbiIdx] || \"\") : \"\";\n\n        // n日\n        const nDayIdx = headers.indexOf(\"n日\");\n        const nDayValue = nDayIdx >= 0 ? (taskData[nDayIdx] !== undefined ? taskData[nDayIdx] : \"\") : \"\";\n        const nDay = nDayValue !== \"\" ? Number(nDayValue) : null;\n\n        // 非営業日振替規則\n        const furikaeIdx = headers.indexOf(\"非営業日振替規則\");\n        const furikae = furikaeIdx >= 0 ? String(taskData[furikaeIdx] || \"\") : \"\";\n\n        // デバッグ出力\n        debugLog(workbook, `業務ID=${id} 判定: 日付=${inputDate}, 周期=${freq}, 基準=${base}, 月=${month}, 週=${weekNum}, 曜日=${youbi}, n日=${nDay}, 振替=${furikae}`);\n\n        // 対象日の情報\n        const dateInfo = getDateInfo(inputDate, calendar);\n\n        // 年次業務の場合は月指定が必須\n        if (freq === \"年次\") {\n            if (month === null || month !== dateInfo.month) {\n                debugLog(workbook, `業務ID=${id}: 月不一致のため対象外 (設定月=${month}, 当月=${dateInfo.month})`, \"info\");\n                return false;\n            }\n        }        // ======== 日次業務 ========\n        if (freq === \"日次\") {\n            const result = isDailyTask(inputDate, base, calendar, furikae);\n            debugLog(workbook, `業務ID=${id}: 日次判定結果=${result}, 振替規則=${furikae}`);\n            return result;\n        }// ======== 週次業務 ========\n        if (freq === \"週次\") {\n            const result = isWeeklyTask(inputDate, base, youbi, furikae, calendar, workbook);\n            debugLog(workbook, `業務ID=${id}: 週次判定結果=${result}`);\n            return result;\n        }\n\n        // ======== 月次業務 ========\n        if (freq === \"月次\") {\n            // 1. 暦日(n日指定)\n            if ((base === \"暦日(n日指定)\" || base === \"暦日(〇日指定)\" || base === \"暦日(○日指定)\") && nDay !== null) {\n                const result = isCalendarDayNthTask(inputDate, nDay, furikae, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 月次・暦日(n日指定)判定結果=${result}`);\n                return result;\n            }\n\n            // 2. 暦日(月末逆算)\n            if (base === \"暦日(月末逆算)\" && (nDay !== null || nDay === 0)) {\n                const result = isCalendarDayEndOfMonthTask(inputDate, nDay, furikae, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 月次・暦日(月末逆算)判定結果=${result}`);\n                return result;\n            }\n\n            // 3. 営業日(n日指定)\n            if ((base === \"営業日(n日指定)\" || base === \"営業日(〇日指定)\" || base === \"営業日(○日指定)\") && nDay !== null) {\n                const result = isBusinessDayNthTask(inputDate, nDay, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 月次・営業日(n日指定)判定結果=${result}`);\n                return result;\n            }\n\n            // 4. 営業日(月末逆算)\n            if (base === \"営業日(月末逆算)\" && (nDay !== null || nDay === 0)) {\n                const result = isBusinessDayEndOfMonthTask(inputDate, nDay, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 月次・営業日(月末逆算)判定結果=${result}`);\n                return result;\n            }\n\n            // 5. 暦日(曜日)\n            if (base === \"暦日(曜日)\" && youbi && weekNum !== null) {\n                const result = isCalendarDayWeekDayTask(inputDate, youbi, weekNum, furikae, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 月次・暦日(曜日)判定結果=${result}`);\n                return result;\n            }\n        }\n\n        // ======== 年次業務 ========\n        if (freq === \"年次\") {\n            // 月チェックは既に行っているのでここでは条件判定のみ\n\n            // 1. 暦日(n日指定)\n            if ((base === \"暦日(n日指定)\" || base === \"暦日(〇日指定)\" || base === \"暦日(○日指定)\") && nDay !== null) {\n                const result = isCalendarDayNthTask(inputDate, nDay, furikae, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 年次・暦日(n日指定)判定結果=${result}`);\n                return result;\n            }\n\n            // 2. 暦日(月末逆算)\n            if (base === \"暦日(月末逆算)\" && (nDay !== null || nDay === 0)) {\n                const result = isCalendarDayEndOfMonthTask(inputDate, nDay, furikae, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 年次・暦日(月末逆算)判定結果=${result}`);\n                return result;\n            }\n\n            // 3. 営業日(n日指定)\n            if ((base === \"営業日(n日指定)\" || base === \"営業日(〇日指定)\" || base === \"営業日(○日指定)\") && nDay !== null) {\n                const result = isBusinessDayNthTask(inputDate, nDay, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 年次・営業日(n日指定)判定結果=${result}`);\n                return result;\n            }\n\n            // 4. 営業日(月末逆算)\n            if (base === \"営業日(月末逆算)\" && (nDay !== null || nDay === 0)) {\n                const result = isBusinessDayEndOfMonthTask(inputDate, nDay, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 年次・営業日(月末逆算)判定結果=${result}`);\n                return result;\n            }\n\n            // 5. 暦日(曜日)\n            if (base === \"暦日(曜日)\" && youbi && weekNum !== null) {\n                const result = isCalendarDayWeekDayTask(inputDate, youbi, weekNum, furikae, calendar, workbook);\n                debugLog(workbook, `業務ID=${id}: 年次・暦日(曜日)判定結果=${result}`);\n                return result;\n            }\n        }\n\n        debugLog(workbook, `業務ID=${id}: どの条件にも一致せず対象外`);\n        return false;\n    } catch (e) {\n        debugLog(workbook, `業務判定エラー: ${String(e)}`, \"error\");\n        return false;\n    }\n}\n\n/**\n * 業務スケジュールシートの準備\n * 入力日付もこのスケジュールシートに作成します\n * 既存データがある場合は消去せず、その次の行から追加します\n */\nfunction getScheduleSheet(workbook: ExcelScript.Workbook) {  \n    // 業務スケジュールシートの準備\n    let scheduleSheet = workbook.getWorksheet(\"業務スケジュール\");\n    if (!scheduleSheet) {\n        debugLog(workbook, \"業務スケジュールシートを新規作成\");\n        scheduleSheet = workbook.addWorksheet(\"業務スケジュール\");\n\n        // 日付入力用\n        scheduleSheet.getRange(\"A1:C1\").setValues([[\"日付\", formatDateBySlash(new Date), \"曜日\"]]);\n\n        // スケジュールのヘッダー行を設定（新規作成時のみ） \n        scheduleSheet.getRange(\"A3:J3\").setValues([[\"スケジュールID\", \"業務ID\", \"業務名\", \"予定日\", \"作業者\", \"開始予定時刻\", \"実開始時刻\", \"実終了時刻\", \"ステータス\", \"メモ\"]]);\n\n        // フォーマット設定\n        scheduleSheet.getRange(\"A3:J3\").getFormat().getFill().setColor(\"#4472C4\");\n        scheduleSheet.getRange(\"A3:J3\").getFormat().getFont().setColor(\"white\");\n        scheduleSheet.getRange(\"A3:J3\").getFormat().getFont().setBold(true);\n    } else {\n        // ヘッダーが正しく設定されているか確認\n        // たまになぜか消えるのでヘッダーは作成するようにしてます\n        // スケジュールのヘッダー行を設定 \n        scheduleSheet.getRange(\"A3:J3\").setValues([[\"スケジュールID\", \"業務ID\", \"業務名\", \"予定日\", \"作業者\", \"開始予定時刻\", \"実開始時刻\", \"実終了時刻\", \"ステータス\", \"メモ\"]]);\n        // フォーマット設定\n        scheduleSheet.getRange(\"A3:J3\").getFormat().getFill().setColor(\"#4472C4\");\n        scheduleSheet.getRange(\"A3:J3\").getFormat().getFont().setColor(\"white\");\n        scheduleSheet.getRange(\"A3:J3\").getFormat().getFont().setBold(true);\n\n        // 既存のデータは消去しない\n        // // 既存のデータをクリア\n        // const existingRange = scheduleSheet.getUsedRange();\n        // if (existingRange && existingRange.getRowCount() > 1) {\n        //   // ヘッダー行以外をクリア\n        //   const dataRange = scheduleSheet.getRange(`A4:C${existingRange.getRowCount()}`);\n        //   dataRange.clear();\n        // }\n    }\n\n    return scheduleSheet;\n}\n\n/**\n * 業務スケジュールシートから既存データの最終行と最大のスケジュールIDを取得する関数\n * @param scheduleSheet - 業務スケジュールシート\n * @returns { lastRowIndex: number, maxScheduleId: number } - 最終行のインデックスと最大のスケジュールID\n */\nfunction getExistingScheduleInfo(scheduleSheet: ExcelScript.Worksheet): { lastRowIndex: number, maxScheduleId: number } {\n    try {\n        // 使用範囲を取得\n        const usedRange = scheduleSheet.getUsedRange();\n\n        // 使用範囲がない場合や、ヘッダー行だけの場合\n        if (!usedRange || usedRange.getRowCount() <= 3) {\n            return { lastRowIndex: 4, maxScheduleId: 0 }; // ヘッダー行の次から開始\n        }\n\n        // 使用範囲の行数を取得して最終行インデックスを計算\n        const lastRowIndex = usedRange.getRowCount() + 1; // 次の空行から開始\n\n        // 最大のスケジュールIDを探す\n        // スケジュールIDは最初の列にあると想定\n        const scheduleIdRange = scheduleSheet.getRange(`A4:A${usedRange.getRowCount()}`);\n        const scheduleIds = scheduleIdRange.getValues();\n\n        let maxScheduleId = 0;\n        for (let i = 0; i < scheduleIds.length; i++) {\n            const idValue = scheduleIds[i][0];\n            if (idValue && typeof idValue === 'number') {\n                maxScheduleId = Math.max(maxScheduleId, idValue);\n            } else if (idValue && typeof idValue === 'string') {\n                const parsedId = parseInt(idValue as string, 10);\n                if (!isNaN(parsedId)) {\n                    maxScheduleId = Math.max(maxScheduleId, parsedId);\n                }\n            }\n        }\n\n        return { lastRowIndex, maxScheduleId };\n    } catch (e) {\n        // エラーが発生した場合は安全なデフォルト値を返す\n        return { lastRowIndex: 4, maxScheduleId: 0 };\n    }\n}\n\n/**\n * 業務の基本条件が特定の日付に一致するかをチェックする共通関数\n * @param dateStr - 対象日付（YYYY-MM-DD形式）\n * @param freq - 周期・頻度（\"日次\"/\"週次\"/\"月次\"/\"年次\"）\n * @param base - 基準（\"暦日(n日指定)\"など）\n * @param month - 月（年次業務の場合のみ使用）\n * @param weekNum - 週番号（暦日(曜日)の場合のみ使用）\n * @param youbi - 曜日（週次または暦日(曜日)の場合のみ使用）\n * @param nDay - n日（暦日(n日指定)などの場合のみ使用）\n * @param calendar - カレンダー情報\n * @returns boolean - 条件に一致する場合true\n */\nfunction isMatchingOriginalCondition(\n    dateStr: string,\n    freq: string,\n    base: string,\n    month: number | null,\n    weekNum: number | null,\n    youbi: string,\n    nDay: number | null,\n    calendar: CalendarInfo\n): boolean {\n    try {\n        const dateInfo = getDateInfo(dateStr, calendar);\n\n        // 年次業務の場合は月が一致するかチェック\n        if (freq === \"年次\" && month !== null && month !== dateInfo.month) {\n            return false;\n        }\n\n        // 日次業務\n        if (freq === \"日次\") {\n            return !base || base === \"\" || base === \"暦日\" || (base.includes(\"営業日\") && isBusinessDay(dateStr, calendar));\n        }\n\n        // 週次業務\n        if (freq === \"週次\" && base === \"暦日(曜日)\" && youbi) {\n            const dayOfWeek = [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"][dateInfo.dayOfWeek];\n            return dayOfWeek === youbi;\n        }\n\n        // 月次・年次業務の各基準\n        // 1. 暦日(n日指定)\n        if ((base === \"暦日(n日指定)\" || base === \"暦日(〇日指定)\" || base === \"暦日(○日指定)\") && nDay !== null) {\n            return dateInfo.day === nDay;\n        }\n\n        // 2. 暦日(月末逆算)\n        if (base === \"暦日(月末逆算)\" && (nDay !== null || nDay === 0)) {\n            const lastDay = getLastDayOfMonth(dateInfo.year, dateInfo.month);\n            const targetDay = nDay === 0 ? lastDay : lastDay - nDay;\n            return dateInfo.day === targetDay;\n        }\n\n        // 3. 営業日(n日指定)\n        if ((base === \"営業日(n日指定)\" || base === \"営業日(〇日指定)\" || base === \"営業日(○日指定)\") && nDay !== null) {\n            // 非営業日は対象外\n            if (!isBusinessDay(dateStr, calendar)) return false;\n\n            // 営業日情報を取得\n            const businessDayInfo = getBusinessDayInfo(dateStr, calendar);\n            return businessDayInfo.nth === nDay;\n        }\n\n        // 4. 営業日(月末逆算)\n        if (base === \"営業日(月末逆算)\" && (nDay !== null || nDay === 0)) {\n            // 非営業日は対象外\n            if (!isBusinessDay(dateStr, calendar)) return false;\n\n            // 営業日情報を取得\n            const businessDayInfo = getBusinessDayInfo(dateStr, calendar);\n            return businessDayInfo.reverse === nDay;\n        }\n\n        // 5. 暦日(曜日)\n        if (base === \"暦日(曜日)\" && youbi && weekNum !== null) {\n            // 曜日を数値に変換\n            const youbiIndex = [\"日\", \"月\", \"火\", \"水\", \"木\", \"金\", \"土\"].indexOf(youbi);\n            if (youbiIndex === -1) return false;\n\n            // 第n曜日の日付を計算\n            const targetDay = getNthDayOfWeekInMonth(dateInfo.year, dateInfo.month, youbiIndex, weekNum);\n            if (targetDay === 0) return false;\n\n            return dateInfo.day === targetDay;\n        }\n\n        return false;\n    } catch (e) {\n        // エラーが発生した場合は安全にfalseを返す\n        return false;\n    }\n}\n\n/**\n * 指定日が他の日付の振替先になっているかをチェックする関数\n * @param inputDate - 対象日付（YYYY-MM-DD形式）\n * @param taskData - 業務データ\n * @param headers - ヘッダー情報\n * @param calendar - カレンダー情報\n * @param workbook - ExcelScript.Workbook\n * @returns boolean - 振替先として一致する場合true\n */\nfunction isTargetDateForFurikae(\n    inputDate: string,\n    taskData: (string | number | boolean)[],\n    headers: string[],\n    calendar: CalendarInfo,\n    workbook: ExcelScript.Workbook\n): boolean {\n    try {\n        debugLog(workbook, `メソッド=isTargetDateForFurikae, inputDate=${inputDate}, taskData=${taskData}`, \"info\");\n        // 対象日が営業日でなければ振替先にはならない\n        if (!isBusinessDay(inputDate, calendar)) {\n            return false;\n        }\n\n        // 業務ID取得（デバッグ用）\n        const idIdx = headers.indexOf(\"業務ID\");\n        const id = idIdx >= 0 ? String(taskData[idIdx] || \"\") : \"未定義\";\n\n        // 基準\n        const baseIdx = headers.indexOf(\"基準\");\n        const base = baseIdx >= 0 ? String(taskData[baseIdx] || \"\") : \"\";\n\n        // n日\n        const nDayIdx = headers.indexOf(\"n日\");\n        const nDayValue = nDayIdx >= 0 ? (taskData[nDayIdx] !== undefined ? taskData[nDayIdx] : \"\") : \"\";\n        const nDay = nDayValue !== \"\" ? Number(nDayValue) : null;\n\n        // 月\n        const monthIdx = headers.indexOf(\"月\");\n        const monthValue = monthIdx >= 0 ? (taskData[monthIdx] !== undefined ? taskData[monthIdx] : \"\") : \"\";\n        const month = monthValue !== \"\" ? Number(monthValue) : null;\n\n        // 非営業日振替規則\n        const furikaeIdx = headers.indexOf(\"非営業日振替規則\");\n        const furikae = furikaeIdx >= 0 ? String(taskData[furikaeIdx] || \"\") : \"\";\n\n        // 振替規則がない場合や振替しない場合はチェック不要\n        if (!furikae || furikae === \"振替しない\") {\n            return false;\n        }\n\n        // 周期・頻度\n        const freqIdx = headers.indexOf(\"周期・頻度\");\n        const freq = freqIdx >= 0 ? String(taskData[freqIdx] || \"\") : \"\";\n\n        // 曜日\n        const youbiIdx = headers.indexOf(\"曜日\");\n        const youbi = youbiIdx >= 0 ? String(taskData[youbiIdx] || \"\") : \"\";\n\n        // 週番号\n        const weekNumIdx = headers.indexOf(\"週番号\");\n        const weekNumValue = weekNumIdx >= 0 ? (taskData[weekNumIdx] !== undefined ? taskData[weekNumIdx] : \"\") : \"\";\n        const weekNum = weekNumValue !== \"\" ? Number(weekNumValue) : null;\n\n        // デバッグ出力\n        debugLog(workbook, `業務ID=${id}: 振替対象日判定 日付=${inputDate}, 振替=${furikae}`);        // 直前営業日の振替ロジック\n        if (furikae === \"直前営業日\") {\n            debugLog(workbook, `業務ID=${id}: 振替対象日判定(直前営業日)を行います`);\n\n            // 対象日の翌日から探索開始\n            const dateObj = new Date(inputDate);\n            const nextDate = new Date(dateObj);\n            nextDate.setDate(nextDate.getDate() + 1);\n\n            // 連続した非営業日を探索\n            let maxDays = 7; // 最大7日先まで探索\n            for (let i = 0; i < maxDays; i++) {\n                const checkDate = formatDate(nextDate);\n\n                // 営業日なら探索を中断\n                if (isBusinessDay(checkDate, calendar)) {\n                    break;\n                }\n\n                // この非営業日が業務条件に一致するか確認\n                const isOriginalTarget = isMatchingOriginalCondition(checkDate, freq, base, month, weekNum, youbi, nDay, calendar);\n\n                if (isOriginalTarget) {\n                    // 直前営業日が対象日と一致するか確認\n                    const prevBizDate = getPreviousBusinessDay(checkDate, calendar, workbook);\n                    if (prevBizDate === inputDate) {\n                        debugLog(workbook, `業務ID=${id}: 日付${inputDate}は${checkDate}の直前営業日振替として対象`);\n                        return true;\n                    }\n                }\n\n                // 次の日へ進む\n                nextDate.setDate(nextDate.getDate() + 1);\n            }\n        }        // 直後営業日の振替ロジック\n        else if (furikae === \"直後営業日\") {\n            debugLog(workbook, `業務ID=${id}: 振替対象日判定(直後営業日)を行います`);\n\n            // 対象日の前日から探索開始\n            const dateObj = new Date(inputDate);\n            const prevDate = new Date(dateObj);\n            prevDate.setDate(prevDate.getDate() - 1);            // 連続した非営業日を探索\n            let maxDays = 14; // 最大14日前まで探索\n\n            // 週次業務の場合、曜日を考慮して判定する\n            let skipExploration = false;\n            if (freq === \"週次\" && base === \"暦日(曜日)\" && youbi) {\n                // isWeeklyTask関数にすでに振替ロジックを実装したため、\n                // ここではダブルチェックを防ぐため処理をスキップする\n                skipExploration = true;\n            }\n\n            // 従来の探索ロジック（連続非営業日）- 週次業務で振替ロジック済みの場合はスキップ\n            if (!skipExploration) {\n                for (let i = 0; i < maxDays; i++) {\n                    const checkDate = formatDate(prevDate);\n\n                    // 営業日なら探索を中断\n                    if (isBusinessDay(checkDate, calendar)) {\n                        break;\n                    }\n\n                    // この非営業日が業務条件に一致するか確認\n                    const isOriginalTarget = isMatchingOriginalCondition(checkDate, freq, base, month, weekNum, youbi, nDay, calendar);\n\n                    if (isOriginalTarget) {\n                        // 直後営業日が対象日と一致するか確認\n                        const nextBizDate = getNextBusinessDay(checkDate, calendar, workbook);\n                        if (nextBizDate === inputDate) {\n                            debugLog(workbook, `業務ID=${id}: 日付${inputDate}は${checkDate}の直後営業日振替として対象`);\n                            return true;\n                        }\n                    }\n\n                    // 前の日へ戻る\n                    prevDate.setDate(prevDate.getDate() - 1);\n                }\n            }\n\n            return false;\n        }\n    } catch (e) {\n        debugLog(workbook, `振替先確認エラー: ${String(e)}`, \"error\");\n        return false;\n    }\n}\n\n\n\nfunction execute(workbook: ExcelScript.Workbook, targetDate: string = \"\", businessIds: string = \"\", calendar: CalendarInfo): string {\n    try {\n        // 通常の業務スケジュール生成モード\n        // 業務スケジュールシートの準備\n        let scheduleSheet = getScheduleSheet(workbook);    // 既存データの最終行と最大スケジュールIDを取得\n        const { lastRowIndex, maxScheduleId } = getExistingScheduleInfo(scheduleSheet);    // 入力日付を取得\n        let inputDateValue: string | number;\n\n        if (targetDate !== \"\") {\n            // 引数で指定された日付を使用\n            inputDateValue = targetDate;\n            debugLog(workbook, `引数から日付を取得: ${targetDate}`);\n\n            if (typeof targetDate === \"string\") {\n                // 日付形式のチェック（yyyy-MM-dd形式またはyyyy/MM/dd形式かどうか）\n                if (/^\\d{4}-\\d{1,2}-\\d{1,2}$/.test(targetDate)) {\n                    // yyyy-MM-dd形式の場合はそのまま使用（数値変換しない）\n                    inputDateValue = targetDate;\n                    debugLog(workbook, `日付形式の文字列として処理: ${targetDate}`);\n                } else if (/^\\d{4}\\/\\d{1,2}\\/\\d{1,2}$/.test(targetDate)) {\n                    // yyyy/MM/dd形式の場合はハイフン形式に変換\n                    const parts: string[] = targetDate.split('/');\n                    const year: string = parts[0];\n                    const month: string = parts[1].padStart(2, '0');\n                    const day: string = parts[2].padStart(2, '0');\n                    inputDateValue = `${year}-${month}-${day}`;\n                    debugLog(workbook, `スラッシュ形式の日付を変換: ${targetDate} → ${inputDateValue}`);\n                } else if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(targetDate)) {\n                    // M/D/YYYY形式の場合はYYYY-MM-DD形式に変換\n                    const parts: string[] = targetDate.split('/');\n                    const month: string = parts[0].padStart(2, '0');\n                    const day: string = parts[1].padStart(2, '0');\n                    const year: string = parts[2];\n                    inputDateValue = `${year}-${month}-${day}`;\n                    debugLog(workbook, `M/D/YYYY形式の日付を変換: ${targetDate} → ${inputDateValue}`);\n                } else {\n                    // それ以外の場合は数値変換を試みる\n                    const numericValue = Number(targetDate);\n                    if (!isNaN(numericValue)) {\n                        inputDateValue = numericValue;\n                        debugLog(workbook, `数値に変換: ${targetDate} → ${numericValue}`);\n                    }\n                }\n            }\n\n            // B1セルにも表示\n            scheduleSheet.getRange(\"B1\").setValue(inputDateValue);\n        } else {\n            // B1セルから日付を取得\n            const inputDateCell = scheduleSheet.getRange(\"B1\");\n            const cellValue = inputDateCell.getValue() as string | number;\n            debugLog(workbook, `セルB1から日付を取得: ${cellValue}`);\n\n            if (!cellValue) {\n                throw new Error(\"B1セルに日付が入力されていません。\");\n            }            // 値が数値であることを確認\n            if (typeof cellValue === \"number\") {\n                inputDateValue = cellValue;\n            } else {\n                // 文字列の場合の処理\n                if (typeof cellValue === \"string\" && /^\\d{4}-\\d{1,2}-\\d{1,2}$/.test(cellValue)) {\n                    // yyyy-MM-dd形式の場合はそのまま使用\n                    inputDateValue = cellValue;\n                    debugLog(workbook, `日付形式の文字列として処理: ${cellValue}`);\n                } else if (typeof cellValue === \"string\" && /^\\d{4}\\/\\d{1,2}\\/\\d{1,2}$/.test(cellValue)) {\n                    // yyyy/MM/dd形式の場合はハイフン形式に変換\n                    const parts: string[] = cellValue.split('/');\n                    const year: string = parts[0];\n                    const month: string = parts[1].padStart(2, '0');\n                    const day: string = parts[2].padStart(2, '0');\n                    inputDateValue = `${year}-${month}-${day}`;\n                    debugLog(workbook, `スラッシュ形式の日付を変換: ${cellValue} → ${inputDateValue}`);\n                } else if (typeof cellValue === \"string\" && /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(cellValue)) {\n                    // M/D/YYYY形式の場合はYYYY-MM-DD形式に変換\n                    const parts: string[] = cellValue.split('/');\n                    const month: string = parts[0].padStart(2, '0');\n                    const day: string = parts[1].padStart(2, '0');\n                    const year: string = parts[2];\n                    inputDateValue = `${year}-${month}-${day}`;\n                    debugLog(workbook, `M/D/YYYY形式の日付を変換: ${cellValue} → ${inputDateValue}`);\n                } else {\n                    // その他の文字列はそのまま使用\n                    inputDateValue = cellValue;\n                }\n            }\n        }\n\n        // 日付変換\n        let inputDate: string;\n        try {\n            inputDate = excelDateToString(inputDateValue);\n\n            if (inputDate.startsWith(\"error:\")) {\n                throw new Error(`日付変換エラー: ${inputDate}`);\n            }\n            debugLog(workbook, `日付変換後: ${inputDate}`);\n        } catch (e) {\n            debugLog(workbook, `日付変換エラー: ${e}`, \"error\");\n            throw new Error(`日付の変換に失敗しました: ${String(e)}`);\n        }\n\n        // D1セルのメッセージをクリア\n        scheduleSheet.getRange(\"D1\").setValue(\"\");\n\n        // 業務一覧テーブルの取得\n        const taskSheet = workbook.getWorksheet(\"業務一覧\");\n        if (!taskSheet) {\n            throw new Error(\"「業務一覧」シートが見つかりません。\");\n        }\n\n        // テーブルデータの取得\n        let taskData: (string | number | boolean)[][] = [];\n        let headers: string[] = [];\n\n        // テーブルを検索\n        const tables = taskSheet.getTables();\n        if (tables.length > 0) {\n            // テーブルからデータを取得\n            const table = tables[0];\n            debugLog(workbook, `テーブル名: ${table.getName()}`);\n\n            try {\n                taskData = table.getRangeBetweenHeaderAndTotal().getValues();\n                headers = table.getHeaderRowRange().getValues()[0].map(v => String(v));\n                debugLog(workbook, `テーブル行数: ${taskData.length}`);\n            } catch (e) {\n                debugLog(workbook, `テーブル取得エラー: ${String(e)}`, \"error\");\n\n                // エラー時はシートから直接取得\n                const range = taskSheet.getUsedRange();\n                const values = range.getValues();\n                headers = values[0].map(v => String(v));\n                taskData = values.slice(1);\n            }\n        } else {\n            // テーブルがない場合はシートから直接取得\n            debugLog(workbook, \"テーブルが見つからないため使用範囲からデータを取得\");\n            const range = taskSheet.getUsedRange();\n            const values = range.getValues();\n            headers = values[0].map(v => String(v));\n            taskData = values.slice(1);\n        }\n\n        // 業務IDが指定されている場合、該当するデータのみを抽出　(主にテストで使用する想定です)\n        if (businessIds && businessIds !== \"\") {\n            debugLog(workbook, `指定された業務ID: ${businessIds}`);\n\n            // 業務IDに対応するカラムのインデックスを取得\n            const businessIdColumnIndex = headers.indexOf(\"業務ID\");\n\n            if (businessIdColumnIndex >= 0) {\n                // フィルタリング：指定された業務IDに一致する業務のみを残す\n                const idList = businessIds.split(',').map(id => id.trim());\n\n                taskData = taskData.filter(row => {\n                    const businessId = String(row[businessIdColumnIndex] || \"\");\n                    return idList.includes(businessId);\n                });\n\n                debugLog(workbook, `フィルター適用後のデータ行数: ${taskData.length}`);\n            } else {\n                debugLog(workbook, \"業務IDの列が見つかりません\", \"warning\");\n            }\n        }\n\n        debugLog(workbook, `ヘッダー: ${headers.join(', ')}`);\n        debugLog(workbook, `データ行数: ${taskData.length}`);\n\n        // D1セルのメッセージをクリア\n        scheduleSheet.getRange(\"D1\").setValue(\"\");\n\n        // 既存のスケジュールデータをチェックして同日のデータがないか確認\n        const existingRange = scheduleSheet.getUsedRange();\n        if (existingRange && existingRange.getRowCount() > 3) { // ヘッダー行より下にデータがある場合\n            // 予定日（C列）のデータを取得\n            const scheduleDateRange = scheduleSheet.getRange(`C4:C${existingRange.getRowCount()}`);\n            const scheduleDates = scheduleDateRange.getValues();\n\n            // 入力日付と同じ日付が存在するかチェック\n            let hasSameDate = false;\n            for (let i = 0; i < scheduleDates.length; i++) {\n                if (scheduleDates[i][0]) {\n                    const existingDateStr = excelDateToString(scheduleDates[i][0]);\n                    if (!existingDateStr.startsWith(\"error:\") && existingDateStr === inputDate) {\n                        hasSameDate = true;\n                        break;\n                    }\n                }\n            }\n\n            // 同日のスケジュールが存在する場合\n            if (hasSameDate) {\n                scheduleSheet.getRange(\"D1\").setValue(\"同日のスケジュールがあります\");\n                scheduleSheet.getRange(\"D1\").getFormat().getFont().setColor(\"#FF0000\");\n                scheduleSheet.getRange(\"D1\").getFormat().getFont().setBold(true);\n                debugLog(workbook, `警告: ${inputDate}のスケジュールはすでに作成済みです`, \"warning\");\n                return `警告: ${inputDate}のスケジュールはすでに作成済みです`;\n            }\n        }\n\n        // 抽出データの出力開始行\n        let currentRow = lastRowIndex; // 既存データの次の行から\n        let scheduleId = maxScheduleId + 1;   // 次のスケジュールID\n        debugLog(workbook, `出力開始行: ${currentRow}`);\n\n        // 業務ID→業務名のマッピングを取得\n        const taskNameMap = prepareTaskNameMap(workbook);\n\n        // 該当する業務を判定して抽出\n        let matchCount = 0;\n        let extractedTasks: { id: string, date: string }[] = [];\n\n        for (let i = 0; i < taskData.length; i++) {\n            const row = taskData[i];\n\n            // 業務IDを取得\n            const idIndex = headers.indexOf(\"業務ID\");\n            const id = idIndex >= 0 ? String(row[idIndex] || \"\") : \"未定義\";\n\n            // 無効な業務IDはスキップ\n            if (!id || id === \"undefined\" || id === \"null\") {\n                debugLog(workbook, `警告: 業務IDなし (行 ${i + 2})`, \"warning\");\n                continue;\n            }\n\n            // 業務名を取得\n            const taskName = taskNameMap.get(id) || \"\";\n\n            // 業務判定\n            if (isTargetTask(inputDate, row, headers, calendar, workbook)) {\n                matchCount++;\n                extractedTasks.push({ id, date: inputDate });\n\n                // スケジュールシートに出力（業務名を追加）\n                scheduleSheet.getRange(`A${currentRow + matchCount - 1}:D${currentRow + matchCount - 1}`).setValues([\n                    [scheduleId, id, taskName, inputDate]\n                ]);\n\n                scheduleId++;\n            } else {\n                // 振替対象日かどうか判定\n                if (isTargetDateForFurikae(inputDate, row, headers, calendar, workbook)) {\n                    matchCount++;\n                    extractedTasks.push({ id, date: inputDate });\n                    debugLog(workbook, `業務ID=${id}: 振替対象日判定で対象になりました`);\n                    // スケジュールシートに出力（業務名を追加）\n                    scheduleSheet.getRange(`A${currentRow + matchCount - 1}:D${currentRow + matchCount - 1}`).setValues([\n                        [scheduleId, id, taskName, inputDate]\n                    ]);\n\n                    scheduleId++;\n                }\n            }\n\n\n        }    // 処理結果メッセージ\n        debugLog(workbook, `処理完了: ${matchCount}件の業務を抽出`);\n        debugLog(workbook, `抽出業務ID: ${extractedTasks.map(t => t.id).join(', ')}`);\n\n        // 抽出された業務IDのリストを返す\n        return extractedTasks.map(t => t.id).join(',');\n    } catch (error) {\n        // エラー情報を記録\n        const errorMessage = String(error);\n        const errorType = error instanceof Error ? error.name : \"Unknown\";    // エラー処理\n        debugLog(workbook, `エラー発生: ${String(error)}`, \"error\");\n        return `エラー: ${String(error)}`;\n    }\n}\n\n\n\n\n/**\n * メイン処理: スケジュール生成\n * @param workbook - Excelワークブック\n * @param targetDate - 処理対象日付（日付文字列または数値のExcelシリアル値、省略可）\n * @param businessIds - 業務IDのカンマ区切りリスト（テスト用）\n * @returns string - 抽出された業務IDのカンマ区切りリスト、またはエラーメッセージ\n */\nfunction main(workbook: ExcelScript.Workbook, targetDate: string = \"\", businessIds: string = \"\", isLocalTest: boolean = false, isDebug: boolean = false): string {\n    \n    isOutputDebugLog = isDebug;\n    \n    create_debug_sheet(workbook, true);\n\n    // カレンダー情報の準備\n    console.log(\"カレンダー情報の準備\");\n    const calendar = prepareCalendarMap(workbook);\n\n    if (isLocalTest) {\n        // テストケースデータをループして各ケースでexecuteを呼び出す\n        for (const testCase of testCaseData) {\n            execute(workbook, testCase[2], testCase[3], calendar);\n        }\n\n    } else {\n        const result = execute(workbook, targetDate, businessIds, calendar);\n        console.log(result);\n        return result;\n    }\n}\n","description":"","noCodeMetadata":"","parameterInfo":"{\"version\":1,\"originalParameterOrder\":[{\"name\":\"targetDate\",\"index\":0},{\"name\":\"businessIds\",\"index\":1},{\"name\":\"isLocalTest\",\"index\":2},{\"name\":\"isDebug\",\"index\":3}],\"parameterSchema\":{\"type\":\"object\",\"required\":[\"targetDate\",\"businessIds\",\"isLocalTest\",\"isDebug\"],\"properties\":{\"targetDate\":{\"type\":\"string\",\"default\":\"\"},\"businessIds\":{\"type\":\"string\",\"default\":\"\"},\"isLocalTest\":{\"type\":\"boolean\",\"default\":false},\"isDebug\":{\"type\":\"boolean\",\"default\":false}}},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"string\"}}},\"signature\":{\"comment\":\"メイン処理: スケジュール生成\",\"parameters\":[{\"name\":\"workbook\",\"comment\":\"- Excelワークブック\"},{\"name\":\"targetDate\",\"comment\":\"- 処理対象日付（日付文字列または数値のExcelシリアル値、省略可）\"},{\"name\":\"businessIds\",\"comment\":\"- 業務IDのカンマ区切りリスト（テスト用）\"},{\"name\":\"isLocalTest\",\"comment\":\"\"},{\"name\":\"isDebug\",\"comment\":\"\"}]}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}